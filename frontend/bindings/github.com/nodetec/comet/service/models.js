// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as sql$0 from "../../../../database/sql/models.js";

export class NostrKey {
    /**
     * Creates a new NostrKey instance.
     * @param {Partial<NostrKey>} [$$source = {}] - The source object to create the NostrKey.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("Nsec" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Nsec"] = "";
        }
        if (!("Npub" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Npub"] = "";
        }
        if (!("Active" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Active"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NostrKey instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {NostrKey}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NostrKey(/** @type {Partial<NostrKey>} */($$parsedSource));
    }
}

export class Relay {
    /**
     * Creates a new Relay instance.
     * @param {Partial<Relay>} [$$source = {}] - The source object to create the Relay.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("Url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Url"] = "";
        }
        if (!("Read" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Read"] = false;
        }
        if (!("Write" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Write"] = false;
        }
        if (!("Sync" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Sync"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Relay instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Relay}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Relay(/** @type {Partial<Relay>} */($$parsedSource));
    }
}

export class Settings {
    /**
     * Creates a new Settings instance.
     * @param {Partial<Settings>} [$$source = {}] - The source object to create the Settings.
     */
    constructor($$source = {}) {
        if (!("Theme" in $$source)) {
            /**
             * theme
             * @member
             * @type {string}
             */
            this["Theme"] = "";
        }
        if (!("Vim" in $$source)) {
            /**
             * editor
             * @member
             * @type {string}
             */
            this["Vim"] = "";
        }
        if (!("LineNumbers" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["LineNumbers"] = "";
        }
        if (!("HighlightActiveLine" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["HighlightActiveLine"] = "";
        }
        if (!("LineWrapping" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["LineWrapping"] = "";
        }
        if (!("IndentSpaces" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["IndentSpaces"] = "";
        }
        if (!("FontSize" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["FontSize"] = "";
        }
        if (!("FontFamily" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["FontFamily"] = "";
        }
        if (!("LineHeight" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["LineHeight"] = "";
        }
        if (!("Npub" in $$source)) {
            /**
             * profile
             * @member
             * @type {string}
             */
            this["Npub"] = "";
        }
        if (!("Nsec" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Nsec"] = "";
        }
        if (!("Relays" in $$source)) {
            /**
             * relays
             * @member
             * @type {string}
             */
            this["Relays"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Settings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Settings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Settings(/** @type {Partial<Settings>} */($$parsedSource));
    }
}

export class Tag {
    /**
     * Creates a new Tag instance.
     * @param {Partial<Tag>} [$$source = {}] - The source object to create the Tag.
     */
    constructor($$source = {}) {
        if (!("ID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["ID"] = 0;
        }
        if (!("Name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Name"] = "";
        }
        if (!("Color" in $$source)) {
            /**
             * @member
             * @type {sql$0.NullString}
             */
            this["Color"] = (new sql$0.NullString());
        }
        if (!("Icon" in $$source)) {
            /**
             * @member
             * @type {sql$0.NullString}
             */
            this["Icon"] = (new sql$0.NullString());
        }
        if (!("CreatedAt" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["CreatedAt"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Tag instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Tag}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType0;
        const $$createField3_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Color" in $$parsedSource) {
            $$parsedSource["Color"] = $$createField2_0($$parsedSource["Color"]);
        }
        if ("Icon" in $$parsedSource) {
            $$parsedSource["Icon"] = $$createField3_0($$parsedSource["Icon"]);
        }
        return new Tag(/** @type {Partial<Tag>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = sql$0.NullString.createFrom;
