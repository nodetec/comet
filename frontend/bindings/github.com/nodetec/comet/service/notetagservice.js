// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as db$0 from "../db/models.js";

/**
 * @param {number} noteID
 * @param {number} tagID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddTagToNote(noteID, tagID) {
    let $resultPromise = /** @type {any} */($Call.ByID(2643393932, noteID, tagID));
    return $resultPromise;
}

/**
 * @param {number} noteID
 * @param {number} tagID
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function CheckTagForNote(noteID, tagID) {
    let $resultPromise = /** @type {any} */($Call.ByID(1794760311, noteID, tagID));
    return $resultPromise;
}

/**
 * @param {number} noteID
 * @returns {Promise<db$0.Tag[]> & { cancel(): void }}
 */
export function GetTagsForNote(noteID) {
    let $resultPromise = /** @type {any} */($Call.ByID(2728210140, noteID));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} noteID
 * @param {number} tagID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveTagFromNote(noteID, tagID) {
    let $resultPromise = /** @type {any} */($Call.ByID(3246519988, noteID, tagID));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = db$0.Tag.createFrom;
const $$createType1 = $Create.Array($$createType0);
