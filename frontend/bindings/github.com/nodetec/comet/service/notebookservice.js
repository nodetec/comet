// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as db$0 from "../db/models.js";

/**
 * @param {number} notebookID
 * @param {number} tagID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddTagToNotebook(notebookID, tagID) {
    let $resultPromise = /** @type {any} */($Call.ByID(2083083162, notebookID, tagID));
    return $resultPromise;
}

/**
 * @param {number} notebookID
 * @param {number} tagID
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function CheckTagForNotebook(notebookID, tagID) {
    let $resultPromise = /** @type {any} */($Call.ByID(1901298027, notebookID, tagID));
    return $resultPromise;
}

/**
 * @param {string} name
 * @returns {Promise<db$0.Notebook> & { cancel(): void }}
 */
export function CreateNotebook(name) {
    let $resultPromise = /** @type {any} */($Call.ByID(4169347514, name));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteNotebook(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(588830629, id));
    return $resultPromise;
}

/**
 * @param {number} id
 * @returns {Promise<db$0.Notebook> & { cancel(): void }}
 */
export function GetNotebook(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(2651103660, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} notebookID
 * @returns {Promise<db$0.Tag[]> & { cancel(): void }}
 */
export function GetTagsForNotebook(notebookID) {
    let $resultPromise = /** @type {any} */($Call.ByID(1666855918, notebookID));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<db$0.Notebook[]> & { cancel(): void }}
 */
export function ListNotebooks() {
    let $resultPromise = /** @type {any} */($Call.ByID(595334731));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} notebookID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveAllTagsFromNotebook(notebookID) {
    let $resultPromise = /** @type {any} */($Call.ByID(2397072902, notebookID));
    return $resultPromise;
}

/**
 * @param {number} notebookID
 * @param {number} tagID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function RemoveTagFromNotebook(notebookID, tagID) {
    let $resultPromise = /** @type {any} */($Call.ByID(2184813900, notebookID, tagID));
    return $resultPromise;
}

/**
 * @param {number} id
 * @param {string} name
 * @param {string} createdAt
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdateNotebook(id, name, createdAt) {
    let $resultPromise = /** @type {any} */($Call.ByID(1306217847, id, name, createdAt));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = db$0.Notebook.createFrom;
const $$createType1 = db$0.Tag.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = $Create.Array($$createType0);
