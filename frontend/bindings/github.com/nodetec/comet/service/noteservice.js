// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as sql$0 from "../../../../database/sql/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as db$0 from "../db/models.js";

/**
 * @param {db$0.Note} note
 * @param {db$0.Tag[]} tags
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddNoteToTrash(note, tags) {
    let $resultPromise = /** @type {any} */($Call.ByID(36748134, note, tags));
    return $resultPromise;
}

/**
 * @param {string} title
 * @param {string} content
 * @param {number} notebookID
 * @param {sql$0.NullInt64} statusID
 * @param {sql$0.NullString} publishedAt
 * @param {sql$0.NullString} eventId
 * @param {string} notetype
 * @param {string} filetype
 * @returns {Promise<db$0.Note> & { cancel(): void }}
 */
export function CreateNote(title, content, notebookID, statusID, publishedAt, eventId, notetype, filetype) {
    let $resultPromise = /** @type {any} */($Call.ByID(3651584158, title, content, notebookID, statusID, publishedAt, eventId, notetype, filetype));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteNote(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1854972521, id));
    return $resultPromise;
}

/**
 * @param {number} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteNoteFromTrash(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1832826689, id));
    return $resultPromise;
}

/**
 * @param {number} id
 * @returns {Promise<db$0.Note> & { cancel(): void }}
 */
export function GetNote(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1230348126, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} id
 * @returns {Promise<db$0.GetNoteFromTrashRow> & { cancel(): void }}
 */
export function GetNoteFromTrash(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1889602112, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} notebookId
 * @param {number} tagId
 * @param {number} limit
 * @param {number} pageParam
 * @param {string} orderBy
 * @param {string} sortDirection
 * @returns {Promise<db$0.Note[]> & { cancel(): void }}
 */
export function ListNotes(notebookId, tagId, limit, pageParam, orderBy, sortDirection) {
    let $resultPromise = /** @type {any} */($Call.ByID(1572240871, notebookId, tagId, limit, pageParam, orderBy, sortDirection));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} limit
 * @param {number} pageParam
 * @param {string} orderBy
 * @param {string} sortDirection
 * @returns {Promise<db$0.Trash[]> & { cancel(): void }}
 */
export function ListNotesFromTrash(limit, pageParam, orderBy, sortDirection) {
    let $resultPromise = /** @type {any} */($Call.ByID(3661159223, limit, pageParam, orderBy, sortDirection));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} noteId
 * @param {string} title
 * @param {string} content
 * @param {number} notebookID
 * @param {sql$0.NullInt64} statusID
 * @param {string} createdAt
 * @param {string} modifiedAt
 * @param {sql$0.NullString} publishedAt
 * @param {sql$0.NullString} eventId
 * @param {string} notetype
 * @param {string} filetype
 * @param {number[]} tagIds
 * @returns {Promise<db$0.CreateNoteFromTrashRow> & { cancel(): void }}
 */
export function RestoreNoteFromTrash(noteId, title, content, notebookID, statusID, createdAt, modifiedAt, publishedAt, eventId, notetype, filetype, tagIds) {
    let $resultPromise = /** @type {any} */($Call.ByID(3762311242, noteId, title, content, notebookID, statusID, createdAt, modifiedAt, publishedAt, eventId, notetype, filetype, tagIds));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} searchTerm
 * @param {number} notebookID
 * @param {number} tagID
 * @param {number} limit
 * @param {number} pageParam
 * @param {string} orderBy
 * @param {string} sortDirection
 * @returns {Promise<db$0.Note[]> & { cancel(): void }}
 */
export function SearchNotes(searchTerm, notebookID, tagID, limit, pageParam, orderBy, sortDirection) {
    let $resultPromise = /** @type {any} */($Call.ByID(2746264403, searchTerm, notebookID, tagID, limit, pageParam, orderBy, sortDirection));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} searchTerm
 * @param {number} limit
 * @param {number} pageParam
 * @param {string} orderBy
 * @param {string} sortDirection
 * @returns {Promise<db$0.Trash[]> & { cancel(): void }}
 */
export function SearchTrash(searchTerm, limit, pageParam, orderBy, sortDirection) {
    let $resultPromise = /** @type {any} */($Call.ByID(3538009948, searchTerm, limit, pageParam, orderBy, sortDirection));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType4($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} id
 * @param {string} title
 * @param {string} content
 * @param {number} notebookID
 * @param {sql$0.NullInt64} statusID
 * @param {boolean} published
 * @param {sql$0.NullString} eventId
 * @param {boolean} pinned
 * @param {string} notetype
 * @param {string} filetype
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdateNote(id, title, content, notebookID, statusID, published, eventId, pinned, notetype, filetype) {
    let $resultPromise = /** @type {any} */($Call.ByID(518540175, id, title, content, notebookID, statusID, published, eventId, pinned, notetype, filetype));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = db$0.Note.createFrom;
const $$createType1 = db$0.GetNoteFromTrashRow.createFrom;
const $$createType2 = $Create.Array($$createType0);
const $$createType3 = db$0.Trash.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = db$0.CreateNoteFromTrashRow.createFrom;
