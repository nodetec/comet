// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * NullInt64 represents an int64 that may be null.
 * NullInt64 implements the [Scanner] interface so
 * it can be used as a scan destination, similar to [NullString].
 */
export class NullInt64 {
    /**
     * Creates a new NullInt64 instance.
     * @param {Partial<NullInt64>} [$$source = {}] - The source object to create the NullInt64.
     */
    constructor($$source = {}) {
        if (!("Int64" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["Int64"] = 0;
        }
        if (!("Valid" in $$source)) {
            /**
             * Valid is true if Int64 is not NULL
             * @member
             * @type {boolean}
             */
            this["Valid"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NullInt64 instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {NullInt64}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NullInt64(/** @type {Partial<NullInt64>} */($$parsedSource));
    }
}

/**
 * NullString represents a string that may be null.
 * NullString implements the [Scanner] interface so
 * it can be used as a scan destination:
 * 
 * 	var s NullString
 * 	err := db.QueryRow("SELECT name FROM foo WHERE id=?", id).Scan(&s)
 * 	...
 * 	if s.Valid {
 * 	   // use s.String
 * 	} else {
 * 	   // NULL value
 * 	}
 */
export class NullString {
    /**
     * Creates a new NullString instance.
     * @param {Partial<NullString>} [$$source = {}] - The source object to create the NullString.
     */
    constructor($$source = {}) {
        if (!("String" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["String"] = "";
        }
        if (!("Valid" in $$source)) {
            /**
             * Valid is true if String is not NULL
             * @member
             * @type {boolean}
             */
            this["Valid"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NullString instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {NullString}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new NullString(/** @type {Partial<NullString>} */($$parsedSource));
    }
}
